import java.util.ArrayList;
import java.util.Stack;
import java.util.Map;
import java.util.HashMap;

public class LRparser {

    private ArrayList<Token> tokenList;
    private Stack<Integer> stateStack;
    private Stack<String> symbolStack;
    private int tokenIdx;
    private String parsingErrorMsg;

    /**
     * Holds actions for each state.
     * 
     * 1st key: state -> corresponding action row
     * 2nd key: symbol -> action (shift, reduce, accept, error)
     */
    private Map<Integer, Map<String, String>> actionTable;
    /**
     * Holds goto for each state,
     * 
     * 1st key: state -> corresponding goto row
     * 2nd key: symbol -> goto (new state)
     */
    private Map<Integer, Map<String, Integer>> gotoTable;

    public LRparser(ArrayList<Token> tokenList) {
        this.tokenList = tokenList;
        this.stateStack = new Stack<>();
        this.symbolStack = new Stack<>();
        this.tokenIdx = 0;
        this.parsingErrorMsg = "";

        initializeParsingTables();
    }

    private void initializeParsingTables() {
        actionTable = new HashMap<>();
        gotoTable = new HashMap<>();

        // ACTION
        addAction(0, "program", "s2");
        addAction(10, "break", "r7");
        addAction(10, "display", "r7");
        addAction(10, "end", "r7");
        addAction(10, "for", "r7");
        addAction(10, "identifier", "r7");
        addAction(10, "if", "r7");
        addAction(10, "int", "r7");
        addAction(10, "integer", "r7");
        addAction(10, "print_line", "r7");
        addAction(10, "while", "r7");
        addAction(100, "end", "s134");
        addAction(101, "(", "s74");
        addAction(101, "identifier", "s72");
        addAction(101, "number_literal", "s73");
        addAction(102, "(", "s141");
        addAction(102, "identifier", "s139");
        addAction(102, "number_literal", "s140");
        addAction(103, "(", "s74");
        addAction(103, "identifier", "s72");
        addAction(103, "number_literal", "s73");
        addAction(104, "(", "s74");
        addAction(104, "identifier", "s72");
        addAction(104, "number_literal", "s73");
        addAction(105, "*", "r39");
        addAction(105, "+", "r39");
        addAction(105, "-", "r39");
        addAction(105, "/", "r39");
        addAction(105, ";", "r39");
        addAction(105, "<", "r39");
        addAction(105, "=", "r39");
        addAction(105, "==", "r39");
        addAction(105, ">", "r39");
        addAction(106, ")", "s144");
        addAction(107, ";", "r21");
        addAction(108, ";", "r22");
        addAction(109, ",", "s78");
        addAction(109, "‘’", "s79");
        addAction(11, ";", "s29");
        addAction(110, ",", "r27");
        addAction(110, "‘’", "r27");
        addAction(111, "+", "s52");
        addAction(111, ",", "r30");
        addAction(111, "-", "s53");
        addAction(111, "<", "s48");
        addAction(111, "=", "s50");
        addAction(111, "==", "s51");
        addAction(111, ">", "s49");
        addAction(111, "‘’", "r30");
        addAction(112, "*", "s55");
        addAction(112, "+", "r33");
        addAction(112, ",", "r33");
        addAction(112, "-", "r33");
        addAction(112, "/", "s56");
        addAction(112, "<", "r33");
        addAction(112, "=", "r33");
        addAction(112, "==", "r33");
        addAction(112, ">", "r33");
        addAction(112, "‘’", "r33");
        addAction(113, "*", "r35");
        addAction(113, "+", "r35");
        addAction(113, ",", "r35");
        addAction(113, "-", "r35");
        addAction(113, "/", "r35");
        addAction(113, "<", "r35");
        addAction(113, "=", "r35");
        addAction(113, "==", "r35");
        addAction(113, ">", "r35");
        addAction(113, "‘’", "r35");
        addAction(114, "*", "r36");
        addAction(114, "+", "r36");
        addAction(114, "++", "s149");
        addAction(114, ",", "r36");
        addAction(114, "-", "r36");
        addAction(114, "/", "r36");
        addAction(114, "<", "r36");
        addAction(114, "=", "r36");
        addAction(114, "==", "r36");
        addAction(114, ">", "r36");
        addAction(114, "‘’", "r36");
        addAction(115, "*", "r37");
        addAction(115, "+", "r37");
        addAction(115, ",", "r37");
        addAction(115, "-", "r37");
        addAction(115, "/", "r37");
        addAction(115, "<", "r37");
        addAction(115, "=", "r37");
        addAction(115, "==", "r37");
        addAction(115, ">", "r37");
        addAction(115, "‘’", "r37");
        addAction(116, "(", "s64");
        addAction(116, "identifier", "s62");
        addAction(116, "number_literal", "s63");
        addAction(117, ";", "r29");
        addAction(118, "begin", "s66");
        addAction(119, "begin", "s45");
        addAction(12, "(", "s36");
        addAction(12, "identifier", "s34");
        addAction(12, "number_literal", "s35");
        addAction(120, "else_if", "r2");
        addAction(120, "‘’", "r2");
        addAction(121, "(", "s91");
        addAction(121, "identifier", "s89");
        addAction(121, "number_literal", "s90");
        addAction(122, "(", "s91");
        addAction(122, "identifier", "s89");
        addAction(122, "number_literal", "s90");
        addAction(123, "*", "r39");
        addAction(123, "+", "r39");
        addAction(123, "-", "r39");
        addAction(123, "/", "r39");
        addAction(123, "begin", "r39");
        addAction(124, ")", "s155");
        addAction(125, ")", "r31");
        addAction(125, "+", "s52");
        addAction(125, "-", "s53");
        addAction(126, ")", "r33");
        addAction(126, "*", "s55");
        addAction(126, "+", "r33");
        addAction(126, "-", "r33");
        addAction(126, "/", "s56");
        addAction(127, ")", "r35");
        addAction(127, "*", "r35");
        addAction(127, "+", "r35");
        addAction(127, "-", "r35");
        addAction(127, "/", "r35");
        addAction(128, ")", "r36");
        addAction(128, "*", "r36");
        addAction(128, "+", "r36");
        addAction(128, "++", "s158");
        addAction(128, "-", "r36");
        addAction(128, "/", "r36");
        addAction(129, ")", "r37");
        addAction(129, "*", "r37");
        addAction(129, "+", "r37");
        addAction(129, "-", "r37");
        addAction(129, "/", "r37");
        addAction(13, "(", "s36");
        addAction(13, "identifier", "s34");
        addAction(13, "number_literal", "s35");
        addAction(130, "(", "s64");
        addAction(130, "identifier", "s62");
        addAction(130, "number_literal", "s63");
        addAction(131, ")", "r32");
        addAction(131, "*", "s55");
        addAction(131, "+", "r32");
        addAction(131, "-", "r32");
        addAction(131, "/", "s56");
        addAction(131, "<", "r32");
        addAction(131, "=", "r32");
        addAction(131, "==", "r32");
        addAction(131, ">", "r32");
        addAction(132, ")", "r34");
        addAction(132, "*", "r34");
        addAction(132, "+", "r34");
        addAction(132, "-", "r34");
        addAction(132, "/", "r34");
        addAction(132, "<", "r34");
        addAction(132, "=", "r34");
        addAction(132, "==", "r34");
        addAction(132, ">", "r34");
        addAction(133, ")", "r38");
        addAction(133, "*", "r38");
        addAction(133, "+", "r38");
        addAction(133, "-", "r38");
        addAction(133, "/", "r38");
        addAction(133, "<", "r38");
        addAction(133, "=", "r38");
        addAction(133, "==", "r38");
        addAction(133, ">", "r38");
        addAction(134, "break", "r2");
        addAction(134, "display", "r2");
        addAction(134, "end", "r2");
        addAction(134, "for", "r2");
        addAction(134, "identifier", "r2");
        addAction(134, "if", "r2");
        addAction(134, "int", "r2");
        addAction(134, "integer", "r2");
        addAction(134, "print_line", "r2");
        addAction(134, "while", "r2");
        addAction(135, ";", "s160");
        addAction(136, "+", "s52");
        addAction(136, "-", "s53");
        addAction(136, ";", "r31");
        addAction(137, "*", "s55");
        addAction(137, "+", "r33");
        addAction(137, "-", "r33");
        addAction(137, "/", "s56");
        addAction(137, ";", "r33");
        addAction(138, "*", "r35");
        addAction(138, "+", "r35");
        addAction(138, "-", "r35");
        addAction(138, "/", "r35");
        addAction(138, ";", "r35");
        addAction(139, "*", "r36");
        addAction(139, "+", "r36");
        addAction(139, "++", "s163");
        addAction(139, "-", "r36");
        addAction(139, "/", "r36");
        addAction(139, ";", "r36");
        addAction(14, "(", "s38");
        addAction(140, "*", "r37");
        addAction(140, "+", "r37");
        addAction(140, "-", "r37");
        addAction(140, "/", "r37");
        addAction(140, ";", "r37");
        addAction(141, "(", "s64");
        addAction(141, "identifier", "s62");
        addAction(141, "number_literal", "s63");
        addAction(142, "*", "s55");
        addAction(142, "+", "r32");
        addAction(142, "-", "r32");
        addAction(142, "/", "s56");
        addAction(142, ";", "r32");
        addAction(142, "<", "r32");
        addAction(142, "=", "r32");
        addAction(142, "==", "r32");
        addAction(142, ">", "r32");
        addAction(143, "*", "r34");
        addAction(143, "+", "r34");
        addAction(143, "-", "r34");
        addAction(143, "/", "r34");
        addAction(143, ";", "r34");
        addAction(143, "<", "r34");
        addAction(143, "=", "r34");
        addAction(143, "==", "r34");
        addAction(143, ">", "r34");
        addAction(144, "*", "r38");
        addAction(144, "+", "r38");
        addAction(144, "-", "r38");
        addAction(144, "/", "r38");
        addAction(144, ";", "r38");
        addAction(144, "<", "r38");
        addAction(144, "=", "r38");
        addAction(144, "==", "r38");
        addAction(144, ">", "r38");
        addAction(145, ";", "r24");
        addAction(146, "(", "s170");
        addAction(146, "identifier", "s168");
        addAction(146, "number_literal", "s169");
        addAction(147, "(", "s116");
        addAction(147, "identifier", "s114");
        addAction(147, "number_literal", "s115");
        addAction(148, "(", "s116");
        addAction(148, "identifier", "s114");
        addAction(148, "number_literal", "s115");
        addAction(149, "*", "r39");
        addAction(149, "+", "r39");
        addAction(149, ",", "r39");
        addAction(149, "-", "r39");
        addAction(149, "/", "r39");
        addAction(149, "<", "r39");
        addAction(149, "=", "r39");
        addAction(149, "==", "r39");
        addAction(149, ">", "r39");
        addAction(149, "‘’", "r39");
        addAction(15, ";", "r15");
        addAction(150, ")", "s173");
        addAction(151, "break", "r10");
        addAction(151, "display", "r10");
        addAction(151, "end", "r10");
        addAction(151, "for", "r10");
        addAction(151, "identifier", "r10");
        addAction(151, "if", "r10");
        addAction(151, "int", "r10");
        addAction(151, "integer", "r10");
        addAction(151, "print_line", "r10");
        addAction(151, "while", "r10");
        addAction(152, "else_if", "s83");
        addAction(152, "‘’", "s84");
        addAction(153, "*", "s55");
        addAction(153, "+", "r32");
        addAction(153, "-", "r32");
        addAction(153, "/", "s56");
        addAction(153, "begin", "r32");
        addAction(154, "*", "r34");
        addAction(154, "+", "r34");
        addAction(154, "-", "r34");
        addAction(154, "/", "r34");
        addAction(154, "begin", "r34");
        addAction(155, "*", "r38");
        addAction(155, "+", "r38");
        addAction(155, "-", "r38");
        addAction(155, "/", "r38");
        addAction(155, "begin", "r38");
        addAction(156, "(", "s130");
        addAction(156, "identifier", "s128");
        addAction(156, "number_literal", "s129");
        addAction(157, "(", "s130");
        addAction(157, "identifier", "s128");
        addAction(157, "number_literal", "s129");
        addAction(158, ")", "r39");
        addAction(158, "*", "r39");
        addAction(158, "+", "r39");
        addAction(158, "-", "r39");
        addAction(158, "/", "r39");
        addAction(159, ")", "s177");
        addAction(16, ";", "r16");
        addAction(160, "(", "s64");
        addAction(160, "identifier", "s62");
        addAction(160, "number_literal", "s63");
        addAction(161, "(", "s141");
        addAction(161, "identifier", "s139");
        addAction(161, "number_literal", "s140");
        addAction(162, "(", "s141");
        addAction(162, "identifier", "s139");
        addAction(162, "number_literal", "s140");
        addAction(163, "*", "r39");
        addAction(163, "+", "r39");
        addAction(163, "-", "r39");
        addAction(163, "/", "r39");
        addAction(163, ";", "r39");
        addAction(164, ")", "s181");
        addAction(165, "+", "s52");
        addAction(165, ",", "r31");
        addAction(165, "-", "s53");
        addAction(165, "‘’", "r31");
        addAction(166, "*", "s55");
        addAction(166, "+", "r33");
        addAction(166, ",", "r33");
        addAction(166, "-", "r33");
        addAction(166, "/", "s56");
        addAction(166, "‘’", "r33");
        addAction(167, "*", "r35");
        addAction(167, "+", "r35");
        addAction(167, ",", "r35");
        addAction(167, "-", "r35");
        addAction(167, "/", "r35");
        addAction(167, "‘’", "r35");
        addAction(168, "*", "r36");
        addAction(168, "+", "r36");
        addAction(168, "++", "s184");
        addAction(168, ",", "r36");
        addAction(168, "-", "r36");
        addAction(168, "/", "r36");
        addAction(168, "‘’", "r36");
        addAction(169, "*", "r37");
        addAction(169, "+", "r37");
        addAction(169, ",", "r37");
        addAction(169, "-", "r37");
        addAction(169, "/", "r37");
        addAction(169, "‘’", "r37");
        addAction(17, ";", "r17");
        addAction(170, "(", "s64");
        addAction(170, "identifier", "s62");
        addAction(170, "number_literal", "s63");
        addAction(171, "*", "s55");
        addAction(171, "+", "r32");
        addAction(171, ",", "r32");
        addAction(171, "-", "r32");
        addAction(171, "/", "s56");
        addAction(171, "<", "r32");
        addAction(171, "=", "r32");
        addAction(171, "==", "r32");
        addAction(171, ">", "r32");
        addAction(171, "‘’", "r32");
        addAction(172, "*", "r34");
        addAction(172, "+", "r34");
        addAction(172, ",", "r34");
        addAction(172, "-", "r34");
        addAction(172, "/", "r34");
        addAction(172, "<", "r34");
        addAction(172, "=", "r34");
        addAction(172, "==", "r34");
        addAction(172, ">", "r34");
        addAction(172, "‘’", "r34");
        addAction(173, "*", "r38");
        addAction(173, "+", "r38");
        addAction(173, ",", "r38");
        addAction(173, "-", "r38");
        addAction(173, "/", "r38");
        addAction(173, "<", "r38");
        addAction(173, "=", "r38");
        addAction(173, "==", "r38");
        addAction(173, ">", "r38");
        addAction(173, "‘’", "r38");
        addAction(174, "break", "r11");
        addAction(174, "display", "r11");
        addAction(174, "else", "r11");
        addAction(174, "end", "r11");
        addAction(174, "for", "r11");
        addAction(174, "identifier", "r11");
        addAction(174, "if", "r11");
        addAction(174, "int", "r11");
        addAction(174, "integer", "r11");
        addAction(174, "print_line", "r11");
        addAction(174, "while", "r11");
        addAction(175, ")", "r32");
        addAction(175, "*", "s55");
        addAction(175, "+", "r32");
        addAction(175, "-", "r32");
        addAction(175, "/", "s56");
        addAction(176, ")", "r34");
        addAction(176, "*", "r34");
        addAction(176, "+", "r34");
        addAction(176, "-", "r34");
        addAction(176, "/", "r34");
        addAction(177, ")", "r38");
        addAction(177, "*", "r38");
        addAction(177, "+", "r38");
        addAction(177, "-", "r38");
        addAction(177, "/", "r38");
        addAction(178, ")", "s186");
        addAction(179, "*", "s55");
        addAction(179, "+", "r32");
        addAction(179, "-", "r32");
        addAction(179, "/", "s56");
        addAction(179, ";", "r32");
        addAction(18, ";", "r18");
        addAction(180, "*", "r34");
        addAction(180, "+", "r34");
        addAction(180, "-", "r34");
        addAction(180, "/", "r34");
        addAction(180, ";", "r34");
        addAction(181, "*", "r38");
        addAction(181, "+", "r38");
        addAction(181, "-", "r38");
        addAction(181, "/", "r38");
        addAction(181, ";", "r38");
        addAction(182, "(", "s170");
        addAction(182, "identifier", "s168");
        addAction(182, "number_literal", "s169");
        addAction(183, "(", "s170");
        addAction(183, "identifier", "s168");
        addAction(183, "number_literal", "s169");
        addAction(184, "*", "r39");
        addAction(184, "+", "r39");
        addAction(184, ",", "r39");
        addAction(184, "-", "r39");
        addAction(184, "/", "r39");
        addAction(184, "‘’", "r39");
        addAction(185, ")", "s189");
        addAction(186, "begin", "s66");
        addAction(187, "*", "s55");
        addAction(187, "+", "r32");
        addAction(187, ",", "r32");
        addAction(187, "-", "r32");
        addAction(187, "/", "s56");
        addAction(187, "‘’", "r32");
        addAction(188, "*", "r34");
        addAction(188, "+", "r34");
        addAction(188, ",", "r34");
        addAction(188, "-", "r34");
        addAction(188, "/", "r34");
        addAction(188, "‘’", "r34");
        addAction(189, "*", "r38");
        addAction(189, "+", "r38");
        addAction(189, ",", "r38");
        addAction(189, "-", "r38");
        addAction(189, "/", "r38");
        addAction(189, "‘’", "r38");
        addAction(19, ";", "r19");
        addAction(190, "break", "r14");
        addAction(190, "display", "r14");
        addAction(190, "end", "r14");
        addAction(190, "for", "r14");
        addAction(190, "identifier", "r14");
        addAction(190, "if", "r14");
        addAction(190, "int", "r14");
        addAction(190, "integer", "r14");
        addAction(190, "print_line", "r14");
        addAction(190, "while", "r14");
        addAction(191, ";", "r8");
        addAction(192, "*", "s25");
        addAction(192, "+", "s24");
        addAction(192, "<", "s207");
        addAction(193, "*", "s25");
        addAction(193, "+", "s24");
        addAction(193, "if", "r17");
        addAction(194, ">", "s209");
        addAction(195, ";", "s210");
        addAction(198, "identifier", "s213");
        addAction(199, "number_literal", "s214");
        addAction(2, "identifier", "s3");
        addAction(20, "=", "s39");
        addAction(200, "(", "s215");
        addAction(201, ")", "s216");
        addAction(202, "identifier", "s217");
        addAction(203, "display", "s219");
        addAction(204, "(", "s220");
        addAction(205, ";", "s221");
        addAction(207, ";", "s223");
        addAction(209, ";", "s225");
        addAction(21, "(", "s40");
        addAction(211, "*", "s25");
        addAction(211, "+", "s24");
        addAction(211, "<", "s227");
        addAction(212, "*", "r19");
        addAction(212, "+", "r19");
        addAction(212, "begin", "r19");
        addAction(213, ";", "s228");
        addAction(214, ";", "s229");
        addAction(216, ";", "s231");
        addAction(217, "++", "s232");
        addAction(218, "if", "r9");
        addAction(219, "(", "s233");
        addAction(22, "identifier", "s42");
        addAction(220, "identifier", "s234");
        addAction(221, "=", "s235");
        addAction(222, ")", "r17");
        addAction(222, "*", "s25");
        addAction(222, "+", "s24");
        addAction(223, ">", "s237");
        addAction(224, "*", "s53");
        addAction(224, ";", "s238");
        addAction(225, "=", "s239");
        addAction(227, ";", "s241");
        addAction(228, "number_literal", "s242");
        addAction(229, "(", "s243");
        addAction(23, ";", "r28");
        addAction(230, ")", "s244");
        addAction(231, "identifier", "s245");
        addAction(232, ";", "r20");
        addAction(233, "string_literal", "s246");
        addAction(234, ")", "s247");
        addAction(235, ";", "s248");
        addAction(237, ";", "s250");
        addAction(239, ";", "s252");
        addAction(24, "(", "s43");
        addAction(240, "*", "s25");
        addAction(240, "+", "s24");
        addAction(240, ",", "r17");
        addAction(241, ">", "s254");
        addAction(242, ";", "s255");
        addAction(244, ";", "s257");
        addAction(245, "++", "s258");
        addAction(246, ")", "s259");
        addAction(247, ";", "r11");
        addAction(248, "==", "s260");
        addAction(249, "*", "s53");
        addAction(249, ";", "s261");
        addAction(25, "identifier", "r48");
        addAction(250, "=", "s262");
        addAction(251, "*", "s53 / r18");
        addAction(251, "+", "r18");
        addAction(251, "if", "r18");
        addAction(252, "==", "s264");
        addAction(254, ";", "s266");
        addAction(255, "(", "s267");
        addAction(256, ")", "s268");
        addAction(257, "identifier", "s269");
        addAction(258, "*", "r20");
        addAction(258, ";", "r20");
        addAction(259, "if", "r16");
        addAction(26, "identifier", "r49");
        addAction(260, ";", "r21");
        addAction(262, ";", "s271");
        addAction(263, "identifier", "s68");
        addAction(264, "if", "r21");
        addAction(265, "*", "s53");
        addAction(265, ";", "s273");
        addAction(266, "=", "s274");
        addAction(268, ";", "s276");
        addAction(269, "++", "s277");
        addAction(27, "$", "r2");
        addAction(270, ")", "r18");
        addAction(270, "*", "s53 / r18");
        addAction(270, "+", "r18");
        addAction(271, "==", "s279");
        addAction(272, ";", "s280");
        addAction(274, ";", "s282");
        addAction(275, ")", "s283");
        addAction(276, "identifier", "s284");
        addAction(277, "*", "r20");
        addAction(277, "+", "r20");
        addAction(277, ";", "r20");
        addAction(278, "identifier", "s68");
        addAction(279, ")", "r21");
        addAction(28, "end", "r3");
        addAction(280, "identifier", "s287");
        addAction(281, "*", "s53 / r18");
        addAction(281, "+", "r18");
        addAction(281, ",", "r18");
        addAction(282, "==", "s289");
        addAction(283, ";", "s290");
        addAction(284, "++", "s291");
        addAction(285, ";", "s292");
        addAction(286, "*", "r19");
        addAction(286, "+", "r19");
        addAction(286, "if", "r19");
        addAction(287, ";", "s293");
        addAction(288, "identifier", "s68");
        addAction(289, ",", "r21");
        addAction(29, "break", "r8");
        addAction(29, "display", "r8");
        addAction(29, "end", "r8");
        addAction(29, "for", "r8");
        addAction(29, "identifier", "r8");
        addAction(29, "if", "r8");
        addAction(29, "int", "r8");
        addAction(29, "integer", "r8");
        addAction(29, "print_line", "r8");
        addAction(29, "while", "r8");
        addAction(290, "identifier", "s295");
        addAction(291, "*", "r20");
        addAction(291, "+", "r20");
        addAction(291, "<", "r20");
        addAction(292, "identifier", "s297");
        addAction(293, "number_literal", "s298");
        addAction(294, ";", "s299");
        addAction(295, "++", "s300");
        addAction(296, ")", "r19");
        addAction(296, "*", "r19");
        addAction(296, "+", "r19");
        addAction(297, ";", "s301");
        addAction(298, ";", "s302");
        addAction(299, "identifier", "s304");
        addAction(3, "begin", "s5");
        addAction(30, "begin", "s45");
        addAction(300, "*", "r20");
        addAction(300, "+", "r20");
        addAction(300, "begin", "r20");
        addAction(301, "number_literal", "s305");
        addAction(302, "(", "s306");
        addAction(303, "*", "r19");
        addAction(303, "+", "r19");
        addAction(303, ",", "r19");
        addAction(304, ";", "s307");
        addAction(305, ";", "s308");
        addAction(307, "number_literal", "s310");
        addAction(308, "(", "s311");
        addAction(309, ")", "s312");
        addAction(31, "+", "s52");
        addAction(31, "-", "s53");
        addAction(31, "<", "s48");
        addAction(31, "=", "s50");
        addAction(31, "==", "s51");
        addAction(31, ">", "s49");
        addAction(31, "begin", "r30");
        addAction(310, ";", "s313");
        addAction(312, ";", "s315");
        addAction(313, "(", "s316");
        addAction(314, ")", "s317");
        addAction(315, "identifier", "s318");
        addAction(317, ";", "s320");
        addAction(318, "++", "s321");
        addAction(319, ")", "s322");
        addAction(32, "*", "s55");
        addAction(32, "+", "r33");
        addAction(32, "-", "r33");
        addAction(32, "/", "s56");
        addAction(32, "<", "r33");
        addAction(32, "=", "r33");
        addAction(32, "==", "r33");
        addAction(32, ">", "r33");
        addAction(32, "begin", "r33");
        addAction(320, "identifier", "s323");
        addAction(321, "*", "r20");
        addAction(321, "+", "r20");
        addAction(321, "if", "r20");
        addAction(322, ";", "s324");
        addAction(323, "++", "s325");
        addAction(324, "identifier", "s326");
        addAction(325, ")", "r20");
        addAction(325, "*", "r20");
        addAction(325, "+", "r20");
        addAction(326, "++", "s327");
        addAction(327, "*", "r20");
        addAction(327, "+", "r20");
        addAction(327, ",", "r20");
        addAction(33, "*", "r35");
        addAction(33, "+", "r35");
        addAction(33, "-", "r35");
        addAction(33, "/", "r35");
        addAction(33, "<", "r35");
        addAction(33, "=", "r35");
        addAction(33, "==", "r35");
        addAction(33, ">", "r35");
        addAction(33, "begin", "r35");
        addAction(34, "*", "r36");
        addAction(34, "+", "r36");
        addAction(34, "++", "s57");
        addAction(34, "-", "r36");
        addAction(34, "/", "r36");
        addAction(34, "<", "r36");
        addAction(34, "=", "r36");
        addAction(34, "==", "r36");
        addAction(34, ">", "r36");
        addAction(34, "begin", "r36");
        addAction(35, "*", "r37");
        addAction(35, "+", "r37");
        addAction(35, "-", "r37");
        addAction(35, "/", "r37");
        addAction(35, "<", "r37");
        addAction(35, "=", "r37");
        addAction(35, "==", "r37");
        addAction(35, ">", "r37");
        addAction(35, "begin", "r37");
        addAction(36, "(", "s64");
        addAction(36, "identifier", "s62");
        addAction(36, "number_literal", "s63");
        addAction(37, "begin", "s66");
        addAction(38, "int", "s25");
        addAction(38, "integer", "s26");
        addAction(39, "(", "s74");
        addAction(39, "identifier", "s72");
        addAction(39, "number_literal", "s73");
        addAction(4, "$", "r1");
        addAction(40, "identifier", "s76");
        addAction(40, "string_literal", "s75");
        addAction(41, ",", "s78");
        addAction(41, "‘’", "s79");
        addAction(42, ",", "r26");
        addAction(42, "=", "s80");
        addAction(42, "‘’", "r26");
        addAction(43, "string_literal", "s81");
        addAction(44, "else_if", "s83");
        addAction(44, "‘’", "s84");
        addAction(45, "break", "s23");
        addAction(45, "display", "s24");
        addAction(45, "for", "s14");
        addAction(45, "identifier", "s20");
        addAction(45, "if", "s12");
        addAction(45, "int", "s25");
        addAction(45, "integer", "s26");
        addAction(45, "print_line", "s21");
        addAction(45, "while", "s13");
        addAction(46, "(", "s91");
        addAction(46, "identifier", "s89");
        addAction(46, "number_literal", "s90");
        addAction(47, "(", "s36");
        addAction(47, "identifier", "s34");
        addAction(47, "number_literal", "s35");
        addAction(48, "(", "r40");
        addAction(48, "identifier", "r40");
        addAction(48, "number_literal", "r40");
        addAction(49, "(", "r41");
        addAction(49, "identifier", "r41");
        addAction(49, "number_literal", "r41");
        addAction(5, "break", "s23");
        addAction(5, "display", "s24");
        addAction(5, "for", "s14");
        addAction(5, "identifier", "s20");
        addAction(5, "if", "s12");
        addAction(5, "int", "s25");
        addAction(5, "integer", "s26");
        addAction(5, "print_line", "s21");
        addAction(5, "while", "s13");
        addAction(50, "(", "r42");
        addAction(50, "identifier", "r42");
        addAction(50, "number_literal", "r42");
        addAction(51, "(", "r43");
        addAction(51, "identifier", "r43");
        addAction(51, "number_literal", "r43");
        addAction(52, "(", "r44");
        addAction(52, "identifier", "r44");
        addAction(52, "number_literal", "r44");
        addAction(53, "(", "r45");
        addAction(53, "identifier", "r45");
        addAction(53, "number_literal", "r45");
        addAction(54, "(", "s36");
        addAction(54, "identifier", "s34");
        addAction(54, "number_literal", "s35");
        addAction(55, "(", "r46");
        addAction(55, "identifier", "r46");
        addAction(55, "number_literal", "r46");
        addAction(56, "(", "r47");
        addAction(56, "identifier", "r47");
        addAction(56, "number_literal", "r47");
        addAction(57, "*", "r39");
        addAction(57, "+", "r39");
        addAction(57, "-", "r39");
        addAction(57, "/", "r39");
        addAction(57, "<", "r39");
        addAction(57, "=", "r39");
        addAction(57, "==", "r39");
        addAction(57, ">", "r39");
        addAction(57, "begin", "r39");
        addAction(58, ")", "s94");
        addAction(59, ")", "r30");
        addAction(59, "+", "s52");
        addAction(59, "-", "s53");
        addAction(59, "<", "s48");
        addAction(59, "=", "s50");
        addAction(59, "==", "s51");
        addAction(59, ">", "s49");
        addAction(6, "end", "s27");
        addAction(60, ")", "r33");
        addAction(60, "*", "s55");
        addAction(60, "+", "r33");
        addAction(60, "-", "r33");
        addAction(60, "/", "s56");
        addAction(60, "<", "r33");
        addAction(60, "=", "r33");
        addAction(60, "==", "r33");
        addAction(60, ">", "r33");
        addAction(61, ")", "r35");
        addAction(61, "*", "r35");
        addAction(61, "+", "r35");
        addAction(61, "-", "r35");
        addAction(61, "/", "r35");
        addAction(61, "<", "r35");
        addAction(61, "=", "r35");
        addAction(61, "==", "r35");
        addAction(61, ">", "r35");
        addAction(62, ")", "r36");
        addAction(62, "*", "r36");
        addAction(62, "+", "r36");
        addAction(62, "++", "s98");
        addAction(62, "-", "r36");
        addAction(62, "/", "r36");
        addAction(62, "<", "r36");
        addAction(62, "=", "r36");
        addAction(62, "==", "r36");
        addAction(62, ">", "r36");
        addAction(63, ")", "r37");
        addAction(63, "*", "r37");
        addAction(63, "+", "r37");
        addAction(63, "-", "r37");
        addAction(63, "/", "r37");
        addAction(63, "<", "r37");
        addAction(63, "=", "r37");
        addAction(63, "==", "r37");
        addAction(63, ">", "r37");
        addAction(64, "(", "s64");
        addAction(64, "identifier", "s62");
        addAction(64, "number_literal", "s63");
        addAction(65, "break", "r13");
        addAction(65, "display", "r13");
        addAction(65, "end", "r13");
        addAction(65, "for", "r13");
        addAction(65, "identifier", "r13");
        addAction(65, "if", "r13");
        addAction(65, "int", "r13");
        addAction(65, "integer", "r13");
        addAction(65, "print_line", "r13");
        addAction(65, "while", "r13");
        addAction(66, "break", "s23");
        addAction(66, "display", "s24");
        addAction(66, "for", "s14");
        addAction(66, "identifier", "s20");
        addAction(66, "if", "s12");
        addAction(66, "int", "s25");
        addAction(66, "integer", "s26");
        addAction(66, "print_line", "s21");
        addAction(66, "while", "s13");
        addAction(67, ";", "s101");
        addAction(68, ";", "r20");
        addAction(69, "+", "s52");
        addAction(69, "-", "s53");
        addAction(69, ";", "r30");
        addAction(69, "<", "s48");
        addAction(69, "=", "s50");
        addAction(69, "==", "s51");
        addAction(69, ">", "s49");
        addAction(7, "break", "s23");
        addAction(7, "display", "s24");
        addAction(7, "end", "r4");
        addAction(7, "for", "s14");
        addAction(7, "identifier", "s20");
        addAction(7, "if", "s12");
        addAction(7, "int", "s25");
        addAction(7, "integer", "s26");
        addAction(7, "print_line", "s21");
        addAction(7, "while", "s13");
        addAction(70, "*", "s55");
        addAction(70, "+", "r33");
        addAction(70, "-", "r33");
        addAction(70, "/", "s56");
        addAction(70, ";", "r33");
        addAction(70, "<", "r33");
        addAction(70, "=", "r33");
        addAction(70, "==", "r33");
        addAction(70, ">", "r33");
        addAction(71, "*", "r35");
        addAction(71, "+", "r35");
        addAction(71, "-", "r35");
        addAction(71, "/", "r35");
        addAction(71, ";", "r35");
        addAction(71, "<", "r35");
        addAction(71, "=", "r35");
        addAction(71, "==", "r35");
        addAction(71, ">", "r35");
        addAction(72, "*", "r36");
        addAction(72, "+", "r36");
        addAction(72, "++", "s105");
        addAction(72, "-", "r36");
        addAction(72, "/", "r36");
        addAction(72, ";", "r36");
        addAction(72, "<", "r36");
        addAction(72, "=", "r36");
        addAction(72, "==", "r36");
        addAction(72, ">", "r36");
        addAction(73, "*", "r37");
        addAction(73, "+", "r37");
        addAction(73, "-", "r37");
        addAction(73, "/", "r37");
        addAction(73, ";", "r37");
        addAction(73, "<", "r37");
        addAction(73, "=", "r37");
        addAction(73, "==", "r37");
        addAction(73, ">", "r37");
        addAction(74, "(", "s64");
        addAction(74, "identifier", "s62");
        addAction(74, "number_literal", "s63");
        addAction(75, ")", "s107");
        addAction(76, ")", "s108");
        addAction(77, ";", "r23");
        addAction(78, "identifier", "s42");
        addAction(79, ";", "r25");
        addAction(8, "break", "r5");
        addAction(8, "display", "r5");
        addAction(8, "end", "r5");
        addAction(8, "for", "r5");
        addAction(8, "identifier", "r5");
        addAction(8, "if", "r5");
        addAction(8, "int", "r5");
        addAction(8, "integer", "r5");
        addAction(8, "print_line", "r5");
        addAction(8, "while", "r5");
        addAction(80, "(", "s116");
        addAction(80, "identifier", "s114");
        addAction(80, "number_literal", "s115");
        addAction(81, ")", "s117");
        addAction(82, "break", "r9");
        addAction(82, "display", "r9");
        addAction(82, "else", "s118");
        addAction(82, "end", "r9");
        addAction(82, "for", "r9");
        addAction(82, "identifier", "r9");
        addAction(82, "if", "r9");
        addAction(82, "int", "r9");
        addAction(82, "integer", "r9");
        addAction(82, "print_line", "r9");
        addAction(82, "while", "r9");
        addAction(83, "(", "s36");
        addAction(83, "identifier", "s34");
        addAction(83, "number_literal", "s35");
        addAction(84, "break", "r12");
        addAction(84, "display", "r12");
        addAction(84, "else", "r12");
        addAction(84, "end", "r12");
        addAction(84, "for", "r12");
        addAction(84, "identifier", "r12");
        addAction(84, "if", "r12");
        addAction(84, "int", "r12");
        addAction(84, "integer", "r12");
        addAction(84, "print_line", "r12");
        addAction(84, "while", "r12");
        addAction(85, "end", "s120");
        addAction(86, "+", "s52");
        addAction(86, "-", "s53");
        addAction(86, "begin", "r31");
        addAction(87, "*", "s55");
        addAction(87, "+", "r33");
        addAction(87, "-", "r33");
        addAction(87, "/", "s56");
        addAction(87, "begin", "r33");
        addAction(88, "*", "r35");
        addAction(88, "+", "r35");
        addAction(88, "-", "r35");
        addAction(88, "/", "r35");
        addAction(88, "begin", "r35");
        addAction(89, "*", "r36");
        addAction(89, "+", "r36");
        addAction(89, "++", "s123");
        addAction(89, "-", "r36");
        addAction(89, "/", "r36");
        addAction(89, "begin", "r36");
        addAction(9, "break", "r6");
        addAction(9, "display", "r6");
        addAction(9, "end", "r6");
        addAction(9, "for", "r6");
        addAction(9, "identifier", "r6");
        addAction(9, "if", "r6");
        addAction(9, "int", "r6");
        addAction(9, "integer", "r6");
        addAction(9, "print_line", "r6");
        addAction(9, "while", "r6");
        addAction(90, "*", "r37");
        addAction(90, "+", "r37");
        addAction(90, "-", "r37");
        addAction(90, "/", "r37");
        addAction(90, "begin", "r37");
        addAction(91, "(", "s64");
        addAction(91, "identifier", "s62");
        addAction(91, "number_literal", "s63");
        addAction(92, "*", "s55");
        addAction(92, "+", "r32");
        addAction(92, "-", "r32");
        addAction(92, "/", "s56");
        addAction(92, "<", "r32");
        addAction(92, "=", "r32");
        addAction(92, "==", "r32");
        addAction(92, ">", "r32");
        addAction(92, "begin", "r32");
        addAction(93, "*", "r34");
        addAction(93, "+", "r34");
        addAction(93, "-", "r34");
        addAction(93, "/", "r34");
        addAction(93, "<", "r34");
        addAction(93, "=", "r34");
        addAction(93, "==", "r34");
        addAction(93, ">", "r34");
        addAction(93, "begin", "r34");
        addAction(94, "*", "r38");
        addAction(94, "+", "r38");
        addAction(94, "-", "r38");
        addAction(94, "/", "r38");
        addAction(94, "<", "r38");
        addAction(94, "=", "r38");
        addAction(94, "==", "r38");
        addAction(94, ">", "r38");
        addAction(94, "begin", "r38");
        addAction(95, "(", "s130");
        addAction(95, "identifier", "s128");
        addAction(95, "number_literal", "s129");
        addAction(96, "(", "s64");
        addAction(96, "identifier", "s62");
        addAction(96, "number_literal", "s63");
        addAction(97, "(", "s64");
        addAction(97, "identifier", "s62");
        addAction(97, "number_literal", "s63");
        addAction(98, ")", "r39");
        addAction(98, "*", "r39");
        addAction(98, "+", "r39");
        addAction(98, "-", "r39");
        addAction(98, "/", "r39");
        addAction(98, "<", "r39");
        addAction(98, "=", "r39");
        addAction(98, "==", "r39");
        addAction(98, ">", "r39");
        addAction(99, ")", "s133");

        // GOTO
        addGoto(0, "PROGRAM", "1");
        addGoto(101, "EXPRESSION", "135");
        addGoto(101, "FACTOR", "71");
        addGoto(101, "SIMPLE_EXPRESSION", "69");
        addGoto(101, "TERM", "70");
        addGoto(102, "FACTOR", "138");
        addGoto(102, "SIMPLE_EXPRESSION", "136");
        addGoto(102, "TERM", "137");
        addGoto(103, "FACTOR", "71");
        addGoto(103, "TERM", "142");
        addGoto(104, "FACTOR", "143");
        addGoto(109, "VARIABLE_DECLARATIONS", "145");
        addGoto(111, "ADDING_OPERATOR", "147");
        addGoto(111, "RELATIONAL_OPERATOR", "146");
        addGoto(112, "MULTIPLYING_OPERATOR", "148");
        addGoto(116, "EXPRESSION", "150");
        addGoto(116, "FACTOR", "61");
        addGoto(116, "SIMPLE_EXPRESSION", "59");
        addGoto(116, "TERM", "60");
        addGoto(118, "COMPOUND_STMT", "151");
        addGoto(119, "COMPOUND_STMT", "152");
        addGoto(12, "EXPRESSION", "30");
        addGoto(12, "FACTOR", "33");
        addGoto(12, "SIMPLE_EXPRESSION", "31");
        addGoto(12, "TERM", "32");
        addGoto(121, "FACTOR", "88");
        addGoto(121, "TERM", "153");
        addGoto(122, "FACTOR", "154");
        addGoto(125, "ADDING_OPERATOR", "156");
        addGoto(126, "MULTIPLYING_OPERATOR", "157");
        addGoto(13, "EXPRESSION", "37");
        addGoto(13, "FACTOR", "33");
        addGoto(13, "SIMPLE_EXPRESSION", "31");
        addGoto(13, "TERM", "32");
        addGoto(130, "EXPRESSION", "159");
        addGoto(130, "FACTOR", "61");
        addGoto(130, "SIMPLE_EXPRESSION", "59");
        addGoto(130, "TERM", "60");
        addGoto(131, "MULTIPLYING_OPERATOR", "97");
        addGoto(136, "ADDING_OPERATOR", "161");
        addGoto(137, "MULTIPLYING_OPERATOR", "162");
        addGoto(141, "EXPRESSION", "164");
        addGoto(141, "FACTOR", "61");
        addGoto(141, "SIMPLE_EXPRESSION", "59");
        addGoto(141, "TERM", "60");
        addGoto(142, "MULTIPLYING_OPERATOR", "104");
        addGoto(146, "FACTOR", "167");
        addGoto(146, "SIMPLE_EXPRESSION", "165");
        addGoto(146, "TERM", "166");
        addGoto(147, "FACTOR", "113");
        addGoto(147, "TERM", "171");
        addGoto(148, "FACTOR", "172");
        addGoto(152, "ELSE_IF_STMT", "174");
        addGoto(153, "MULTIPLYING_OPERATOR", "122");
        addGoto(156, "FACTOR", "127");
        addGoto(156, "TERM", "175");
        addGoto(157, "FACTOR", "176");
        addGoto(160, "EXPRESSION", "178");
        addGoto(160, "FACTOR", "61");
        addGoto(160, "SIMPLE_EXPRESSION", "59");
        addGoto(160, "TERM", "60");
        addGoto(161, "FACTOR", "138");
        addGoto(161, "TERM", "179");
        addGoto(162, "FACTOR", "180");
        addGoto(165, "ADDING_OPERATOR", "182");
        addGoto(166, "MULTIPLYING_OPERATOR", "183");
        addGoto(170, "EXPRESSION", "185");
        addGoto(170, "FACTOR", "61");
        addGoto(170, "SIMPLE_EXPRESSION", "59");
        addGoto(170, "TERM", "60");
        addGoto(171, "MULTIPLYING_OPERATOR", "148");
        addGoto(175, "MULTIPLYING_OPERATOR", "157");
        addGoto(179, "MULTIPLYING_OPERATOR", "162");
        addGoto(182, "FACTOR", "167");
        addGoto(182, "TERM", "187");
        addGoto(183, "FACTOR", "188");
        addGoto(186, "COMPOUND_STMT", "190");
        addGoto(187, "MULTIPLYING_OPERATOR", "183");
        addGoto(192, "ADDING_OPERATOR", "49");
        addGoto(192, "RELATIONAL_OPERATOR", "206");
        addGoto(193, "ADDING_OPERATOR", "208");
        addGoto(196, "SIMPLE_EXPRESSION", "211");
        addGoto(198, "FACTOR", "212");
        addGoto(203, "DISPLAY_STMT", "218");
        addGoto(206, "SIMPLE_EXPRESSION", "222");
        addGoto(208, "TERM", "224");
        addGoto(211, "ADDING_OPERATOR", "49");
        addGoto(211, "RELATIONAL_OPERATOR", "226");
        addGoto(215, "EXPRESSION", "230");
        addGoto(215, "SIMPLE_EXPRESSION", "151");
        addGoto(22, "VARIABLE_DECLARATION", "41");
        addGoto(222, "ADDING_OPERATOR", "236");
        addGoto(224, "MULTIPLYING_OPERATOR", "52");
        addGoto(226, "SIMPLE_EXPRESSION", "240");
        addGoto(236, "TERM", "249");
        addGoto(238, "TERM", "251");
        addGoto(240, "ADDING_OPERATOR", "253");
        addGoto(243, "EXPRESSION", "256");
        addGoto(243, "SIMPLE_EXPRESSION", "151");
        addGoto(249, "MULTIPLYING_OPERATOR", "52");
        addGoto(251, "MULTIPLYING_OPERATOR", "263");
        addGoto(253, "TERM", "265");
        addGoto(261, "TERM", "270");
        addGoto(263, "FACTOR", "272");
        addGoto(265, "MULTIPLYING_OPERATOR", "52");
        addGoto(267, "EXPRESSION", "275");
        addGoto(267, "SIMPLE_EXPRESSION", "151");
        addGoto(270, "MULTIPLYING_OPERATOR", "278");
        addGoto(273, "TERM", "281");
        addGoto(278, "FACTOR", "285");
        addGoto(280, "FACTOR", "286");
        addGoto(281, "MULTIPLYING_OPERATOR", "288");
        addGoto(288, "FACTOR", "294");
        addGoto(292, "FACTOR", "296");
        addGoto(299, "FACTOR", "303");
        addGoto(3, "COMPOUND_STMT", "4");
        addGoto(30, "COMPOUND_STMT", "44");
        addGoto(306, "EXPRESSION", "309");
        addGoto(306, "SIMPLE_EXPRESSION", "151");
        addGoto(31, "ADDING_OPERATOR", "47");
        addGoto(31, "RELATIONAL_OPERATOR", "46");
        addGoto(311, "EXPRESSION", "314");
        addGoto(311, "SIMPLE_EXPRESSION", "151");
        addGoto(316, "EXPRESSION", "319");
        addGoto(316, "SIMPLE_EXPRESSION", "151");
        addGoto(32, "MULTIPLYING_OPERATOR", "54");
        addGoto(36, "EXPRESSION", "58");
        addGoto(36, "FACTOR", "61");
        addGoto(36, "SIMPLE_EXPRESSION", "59");
        addGoto(36, "TERM", "60");
        addGoto(37, "COMPOUND_STMT", "65");
        addGoto(38, "DECLARATION_STMT", "67");
        addGoto(38, "TYPE", "22");
        addGoto(39, "EXPRESSION", "68");
        addGoto(39, "FACTOR", "71");
        addGoto(39, "SIMPLE_EXPRESSION", "69");
        addGoto(39, "TERM", "70");
        addGoto(41, "VARIABLE_DECLARATIONS", "77");
        addGoto(44, "ELSE_IF_STMT", "82");
        addGoto(45, "ASSIGNMENT_STMT", "15");
        addGoto(45, "BREAK_STMT", "18");
        addGoto(45, "CONDITIONAL_STMT", "8");
        addGoto(45, "DECLARATION_STMT", "17");
        addGoto(45, "DISPLAY_STMT", "19");
        addGoto(45, "FOR_STMT", "10");
        addGoto(45, "PRINT_STMT", "16");
        addGoto(45, "SIMPLE_STMT", "11");
        addGoto(45, "STMT", "7");
        addGoto(45, "STMTS", "85");
        addGoto(45, "TYPE", "22");
        addGoto(45, "WHILE_STMT", "9");
        addGoto(46, "FACTOR", "88");
        addGoto(46, "SIMPLE_EXPRESSION", "86");
        addGoto(46, "TERM", "87");
        addGoto(47, "FACTOR", "33");
        addGoto(47, "TERM", "92");
        addGoto(5, "ASSIGNMENT_STMT", "15");
        addGoto(5, "BREAK_STMT", "18");
        addGoto(5, "CONDITIONAL_STMT", "8");
        addGoto(5, "DECLARATION_STMT", "17");
        addGoto(5, "DISPLAY_STMT", "19");
        addGoto(5, "FOR_STMT", "10");
        addGoto(5, "PRINT_STMT", "16");
        addGoto(5, "SIMPLE_STMT", "11");
        addGoto(5, "STMT", "7");
        addGoto(5, "STMTS", "6");
        addGoto(5, "TYPE", "22");
        addGoto(5, "WHILE_STMT", "9");
        addGoto(54, "FACTOR", "93");
        addGoto(59, "ADDING_OPERATOR", "96");
        addGoto(59, "RELATIONAL_OPERATOR", "95");
        addGoto(60, "MULTIPLYING_OPERATOR", "97");
        addGoto(64, "EXPRESSION", "99");
        addGoto(64, "FACTOR", "61");
        addGoto(64, "SIMPLE_EXPRESSION", "59");
        addGoto(64, "TERM", "60");
        addGoto(66, "ASSIGNMENT_STMT", "15");
        addGoto(66, "BREAK_STMT", "18");
        addGoto(66, "CONDITIONAL_STMT", "8");
        addGoto(66, "DECLARATION_STMT", "17");
        addGoto(66, "DISPLAY_STMT", "19");
        addGoto(66, "FOR_STMT", "10");
        addGoto(66, "PRINT_STMT", "16");
        addGoto(66, "SIMPLE_STMT", "11");
        addGoto(66, "STMT", "7");
        addGoto(66, "STMTS", "100");
        addGoto(66, "TYPE", "22");
        addGoto(66, "WHILE_STMT", "9");
        addGoto(69, "ADDING_OPERATOR", "103");
        addGoto(69, "RELATIONAL_OPERATOR", "102");
        addGoto(7, "ASSIGNMENT_STMT", "15");
        addGoto(7, "BREAK_STMT", "18");
        addGoto(7, "CONDITIONAL_STMT", "8");
        addGoto(7, "DECLARATION_STMT", "17");
        addGoto(7, "DISPLAY_STMT", "19");
        addGoto(7, "FOR_STMT", "10");
        addGoto(7, "PRINT_STMT", "16");
        addGoto(7, "SIMPLE_STMT", "11");
        addGoto(7, "STMT", "7");
        addGoto(7, "STMTS", "28");
        addGoto(7, "TYPE", "22");
        addGoto(7, "WHILE_STMT", "9");
        addGoto(70, "MULTIPLYING_OPERATOR", "104");
        addGoto(74, "EXPRESSION", "106");
        addGoto(74, "FACTOR", "61");
        addGoto(74, "SIMPLE_EXPRESSION", "59");
        addGoto(74, "TERM", "60");
        addGoto(78, "VARIABLE_DECLARATION", "109");
        addGoto(80, "EXPRESSION", "110");
        addGoto(80, "FACTOR", "113");
        addGoto(80, "SIMPLE_EXPRESSION", "111");
        addGoto(80, "TERM", "112");
        addGoto(83, "EXPRESSION", "119");
        addGoto(83, "FACTOR", "33");
        addGoto(83, "SIMPLE_EXPRESSION", "31");
        addGoto(83, "TERM", "32");
        addGoto(86, "ADDING_OPERATOR", "121");
        addGoto(87, "MULTIPLYING_OPERATOR", "122");
        addGoto(91, "EXPRESSION", "124");
        addGoto(91, "FACTOR", "61");
        addGoto(91, "SIMPLE_EXPRESSION", "59");
        addGoto(91, "TERM", "60");
        addGoto(92, "MULTIPLYING_OPERATOR", "54");
        addGoto(95, "FACTOR", "127");
        addGoto(95, "SIMPLE_EXPRESSION", "125");
        addGoto(95, "TERM", "126");
        addGoto(96, "FACTOR", "61");
        addGoto(96, "TERM", "131");
        addGoto(97, "FACTOR", "132");
    }

    private void addAction(int state, String symbol, String action) {
        actionTable.putIfAbsent(state, new HashMap<>());
        actionTable.get(state).put(symbol, action);
    }

    private void addGoto(int state, String symbol, String nextState) {
        gotoTable.putIfAbsent(state, new HashMap<>());
        gotoTable.get(state).put(symbol, Integer.parseInt(nextState));
    }

    private String getLHS(int productionNumber) {
        // Define LHS for each production
        switch (productionNumber) {
            case 1: return "PROGRAM";
            case 48: return "identifier";
            // Add more cases for each production rule
            default: return "";
        }
    }

    private String[] getRHS(int productionNumber) {
        // Define RHS for each production
        switch (productionNumber) {
            case 1: return new String[] {"program", "identifier", "COMPOUND_STMT"};
            case 48: return new String[] {"identifier"};
            // Add more cases for each production rule
            default: return new String[] {};
        }
    }

    private void preprocess() {
        removeComments();
    }

    private void removeComments() {
        tokenList.removeIf(token -> "comment".equals(token.getTokenAttribute()));
    }

    private void printStackFromBottom() {
        System.out.println("State Stack (bottom to top):");
        for (int i = 0; i < stateStack.size(); i++) {
            System.out.print(stateStack.get(i) + " ");
        }
        System.out.println();

        System.out.println("Symbol Stack (bottom to top):");
        for (int i = 0; i < symbolStack.size(); i++) {
            System.out.print(symbolStack.get(i) + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        if (args.length != 1) {
            System.err.println("Usage: java LRParser <filename>");
            return;
        }

        SmallLexer smallLexer = new SmallLexer();
        smallLexer.setPrintTokenList(false);
        smallLexer.lex(args[0]);

        LRparser lrParser = new LRparser(smallLexer.getTokenList());
        if (lrParser.parse() != 0) {
            System.out.println(lrParser.parsingErrorMsg);
            System.out.println("Parsing Failed");
        } else {
            System.out.println("Parsing Ok");
        }
    }

    public int parse() {
        preprocess();

        stateStack.push(0); // initial state, 0
        symbolStack.push("$"); // EOS

        while (true) {
            int currentState = stateStack.peek();
            Token currentToken = tokenList.get(tokenIdx);
                System.out.println("currentState=" + currentState + " currentToken=" + currentToken.getTokenName());
            // get action based on [state, token]
            String action = "";
            if (currentToken.getTokenAttribute().equals("identifier")) {
                action = actionTable.get(currentState).get(currentToken.getTokenAttribute());
            } else {
                action = actionTable.get(currentState).get(currentToken.getTokenName());
            }

            if (action == null) {
                parsingErrorMsg = "Syntax error at token index " + tokenIdx + ": " + currentToken.getTokenName();
                return 1;
            }
                System.out.println("action=" + action);

            if (action.equals("ACCEPT")) {
                // Accept
                return 0;
            } else if (action.charAt(0) == 's') { // ex. s5, 's'hift to 5
                // Shift action
                int nextState = Integer.parseInt(action.substring(1));
                    System.out.println("nextState=" + nextState);
                stateStack.push(nextState);
                symbolStack.push(currentToken.getTokenName());
                tokenIdx++;

                printStackFromBottom();
            } else if (action.charAt(0) == 'r') { // ex. r5, 'r'educe to 5
                // Reduce action
                int productionNumber = Integer.parseInt(action.substring(1));
                    System.out.println("productionNumber=" + productionNumber);
                String lhs = getLHS(productionNumber);
                    System.out.println("lhs=" + lhs);
                String[] rhs = getRHS(productionNumber);
                    System.out.println("rhs=" + rhs[0]);

                    System.out.println("stateStack=" + stateStack.peek());
                // Pop |rhs| symbols from the stack
                for (int i = 0; i < rhs.length; i++) {
                    stateStack.pop();
                    symbolStack.pop();
                    printStackFromBottom();
                }
                    System.out.println("stateStack=" + stateStack.peek());

                // Push lhs and goto state
                symbolStack.push(lhs);
                int gotoState = gotoTable.get(stateStack.peek()).get(lhs);
                stateStack.push(gotoState);

                printStackFromBottom();
            }
        }
    }

}
